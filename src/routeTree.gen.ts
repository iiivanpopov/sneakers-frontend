/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './app/routes/__root'
import { Route as ProfileRouteImport } from './app/routes/profile'
import { Route as OrdersRouteImport } from './app/routes/orders'
import { Route as CatalogRouteImport } from './app/routes/catalog'
import { Route as CartRouteImport } from './app/routes/cart'
import { Route as AuthRouteImport } from './app/routes/auth'
import { Route as AboutRouteImport } from './app/routes/about'
import { Route as IndexRouteImport } from './app/routes/index'

const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./app/routes/profile.lazy').then((d) => d.Route))
const OrdersRoute = OrdersRouteImport.update({
  id: '/orders',
  path: '/orders',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./app/routes/orders.lazy').then((d) => d.Route))
const CatalogRoute = CatalogRouteImport.update({
  id: '/catalog',
  path: '/catalog',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./app/routes/catalog.lazy').then((d) => d.Route))
const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./app/routes/cart.lazy').then((d) => d.Route))
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./app/routes/auth.lazy').then((d) => d.Route))
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/cart': typeof CartRoute
  '/catalog': typeof CatalogRoute
  '/orders': typeof OrdersRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/cart': typeof CartRoute
  '/catalog': typeof CatalogRoute
  '/orders': typeof OrdersRoute
  '/profile': typeof ProfileRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/auth': typeof AuthRoute
  '/cart': typeof CartRoute
  '/catalog': typeof CatalogRoute
  '/orders': typeof OrdersRoute
  '/profile': typeof ProfileRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/auth'
    | '/cart'
    | '/catalog'
    | '/orders'
    | '/profile'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/auth' | '/cart' | '/catalog' | '/orders' | '/profile'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/auth'
    | '/cart'
    | '/catalog'
    | '/orders'
    | '/profile'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  AuthRoute: typeof AuthRoute
  CartRoute: typeof CartRoute
  CatalogRoute: typeof CatalogRoute
  OrdersRoute: typeof OrdersRoute
  ProfileRoute: typeof ProfileRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders': {
      id: '/orders'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/catalog': {
      id: '/catalog'
      path: '/catalog'
      fullPath: '/catalog'
      preLoaderRoute: typeof CatalogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  AuthRoute: AuthRoute,
  CartRoute: CartRoute,
  CatalogRoute: CatalogRoute,
  OrdersRoute: OrdersRoute,
  ProfileRoute: ProfileRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
